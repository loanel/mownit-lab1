package mownitLab;


import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RefineryUtilities;

import javax.swing.*;
import java.util.HashSet;
import java.util.Set;

public class TaskFour {

    public double logistic(double y, double r) {
        return r * y * (1.0 - y);
    }

    public float floatLogistic(float y, float r) {
        return r * y * (1 - y);
    }

    public void zeroTest(float y, float r) {
        Set<Float> existingNumbers = new HashSet<Float>();
        boolean cycleOccured = false;
        int iterations = 0;
        float initial = y;
        while (y != 0) {
            if(existingNumbers.contains(y)){
                cycleOccured = true;
                break;
            }
            else existingNumbers.add(y);
            iterations++;
            y = floatLogistic(y, r);
//            System.out.println(y);
        }
        if(!cycleOccured) System.out.println("Initial = " + initial + " , Iterations = " + iterations);
        else System.out.println("For initial + " + initial + " a cycle occured");
    }

    public void taskA() {
        XYSeriesCollection gatheredData = new XYSeriesCollection();
        XYSeries dataset = new XYSeries("Bifurcation Diagram");

        for (double r = 1; r <= 4; r += 0.00001) {

//            double y = 0.3;
//            result seems better with random
            double y = Math.random();
            for (int i = 0; i < 5000; i++) {
                y = logistic(y, r);
            }
            for (int i = 0; i < 50; i++) {
                y = logistic(y, r);
                dataset.add(r, y);
            }
        }

        System.out.println("Gathered data");
        gatheredData.addSeries(dataset);
        BifurcationScatterPlot bif = new BifurcationScatterPlot("Bifurcation", gatheredData);
        bif.setSize(1440, 960);
        bif.setLocationRelativeTo(null);
        bif.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        bif.setVisible(true);
    }

    public void taskB() {
        XYSeriesCollection gatheredData = new XYSeriesCollection();
        XYSeries dataset = new XYSeries("Bifurcation");
        //uncomment to graph with picked precision
        for (double r = 3.75; r <= 3.8; r += 0.0000005) {

            double y = 0.3;
            for (int i = 0; i < 1000; i++) {
                y = logistic(y, r);
            }
            for (int i = 0; i < 50; i++) {
                y = logistic(y, r);
                dataset.add(r, y);
            }
        }

        // 4.b for floats
//        for (float r = (float)3.75; r <= 3.8; r += 0.0000005) {
//
//            float y = (float)0.3;
//            for (int i = 0; i < 1000; i++) {
//                y = floatLogistic(y, r);
//            }
//            for (int i = 0; i < 50; i++) {
//                y = floatLogistic(y, r);
//                dataset.add(r, y);
//            }
//        }

        System.out.println("Gathered data");
        gatheredData.addSeries(dataset);
        BifurcationScatterPlot bif = new BifurcationScatterPlot("Bifurcation", gatheredData);
        bif.setSize(1440, 960);
        bif.setLocationRelativeTo(null);
        bif.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        bif.setVisible(true);
    }

    public void taskC() {
        for(float i = 0; i <= 1000; i++){
            zeroTest(i/1000, 4);
        }
    }

    public void calculate() {
//        uncomment to check result for each task
//        taskA();
//        taskB();
        taskC();
    }

};

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































